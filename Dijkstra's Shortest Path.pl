% - Факти 
% - Върхове с наименованията на столиците в региона на Източна Европа
връх('София').
връх('Букурещ').
връх('Будапеща').
връх('Братислава').
връх('Прага').
връх('Варшава').
връх('Вилнюс').
връх('Рига').
връх('Талин').

% - Ребра свързващи върховете 
% - Използвам неориентиран граф, т.е. може да се движим и в двете посоки по ребрата между върховете
ребро('София','Букурещ',357).
ребро('София','Будапеща',766).
ребро('София','Варшава',1474).

ребро('Букурещ','Будапеща',855).
ребро('Букурещ','Варшава',1321).

ребро('Будапеща','Братислава',195).
ребро('Будапеща','Прага',532).
ребро('Будапеща','Варшава',705).

ребро('Братислава','Прага',328).
ребро('Братислава','Варшава',663).

ребро('Прага','Варшава',639).

ребро('Варшава','Вилнюс',471).
ребро('Варшава','Рига',672).
ребро('Варшава','Талин',1138).

ребро('Вилнюс','Рига',295).
ребро('Вилнюс','Талин',645).

ребро('Рига','Талин',311).

% - правило за свързаност на ребрата на граф ( лесна проверка дали имаме връзка между ребрата)
свързани_ребра(А,Б):-
    ребро(А,Б,_);
    ребро(Б,А,_).

% - правило за свързаност на ребрата и връщане на стойност 
% ( разстояние между тях,същото по логика като свързани_ребра, но връщаме и стойността за разстоянието между точките)
съседно_ребро(А,Б,Р):-
    ребро(А,Б,Р);
    ребро(Б,А,Р).

% - Входящо правило - използваме го, за да извършим изчисление (цел за извикване на заявка)
най_кратък_път(НачалнаТочка, КрайнаТочка, Път, Разстояние) :-
    dijkstra([[0, НачалнаТочка, []]], [], КрайнаТочка, ОбратенПът, Разстояние),
    reverse(ОбратенПът, Път).


% - Алгоритъма на Дийкстра (за най-кратък път в граф)
% - Използваме рекурсия, за да извършим изчисленията


dijkstra([[Разстояние, Връх, Път]|_], _, Връх, [Връх|Път], Разстояние).

dijkstra([[Дист, Текущ, ПътДосега]|Опашка], Посетен, КрайнаТочка, Път, Разстояние) :-
    member(Текущ, Посетен), !,
    dijkstra(Опашка, Посетен, КрайнаТочка, Път, Разстояние).

dijkstra([[Дист, Текущ, ПътДосега]|Опашка], Посетен, КрайнаТочка, Път, Разстояние) :-
    findall([НоваДист, Съсед, [Текущ|ПътДосега]],
            (съседно_ребро(Текущ, Съсед, Цена),
             \+ member(Съсед, Посетен),
             \+ member([_, Съсед, _], Опашка),
             НоваДист is Дист + Цена),
            Съседи),
    append(Опашка, Съседи, НоваОпашка),
    sort(НоваОпашка, СортиранаОпашка),  % - Винаги преглежда най-малката крайна стойност с приоритет
    dijkstra(СортиранаОпашка, [Текущ|Посетен], КрайнаТочка, Път, Разстояние).

